{"ast":null,"code":"var _jsxFileName = \"/Users/maithilitole/hsfo-part1/part1-unicafe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Statistics = () => {\n  if (all === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No feedback available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: statsent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Statistics;\n\nconst Statistic = ({\n  text,\n  statsent\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"Good\",\n      statsent: good.gdclicks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"Bad\",\n      statsent: bad.badclicks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"Neutral\",\n      statsent: neutral.neutclicks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"All\",\n      statsent: allClicks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"Average\",\n      statsent: averageClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"Positive\",\n      statsent: positiveClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 3\n  }, this);\n};\n\n_c2 = Statistic;\n\nconst App = () => {\n  _s();\n\n  const [good, setGood] = useState({\n    gdclicks: 0,\n    gdpts: 0\n  });\n  const [neutral, setNeutral] = useState({\n    neutclicks: 0,\n    neutpts: 0\n  });\n  const [bad, setBad] = useState({\n    badclicks: 0,\n    badpts: 0\n  });\n\n  const Button = ({\n    handleClick,\n    text\n  }) => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n\n  const handleGoodClick = () => setGood({\n    gdclicks: good.gdclicks + 1,\n    gdpts: good.gdpts + 1\n  });\n\n  const handleBadClick = () => setBad({\n    badclicks: bad.badclicks + 1,\n    badpts: bad.badpts - 1\n  });\n\n  const handleNeutClick = () => setNeutral({\n    neutclicks: neutral.neutclicks + 1,\n    neutpts: neutral.neutpts - 0\n  });\n\n  const averageClick = (good.gdpts + bad.badpts + neutral.neutpts) / 3;\n  const positiveClick = good.gdclicks * 100 / (good.gdclicks + bad.badclicks + neutral.neutclicks) + '%';\n  const allClicks = good.gdclicks + bad.badclicks + neutral.neutclicks;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Give Feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: handleGoodClick,\n      text: \"Good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: handleNeutClick,\n      text: \"Neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: handleBadClick,\n      text: \"Bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      statistics: statistics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"dwZEwBNmbZtZjkiPayJi3oSCWu4=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Statistics\");\n$RefreshReg$(_c2, \"Statistic\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/maithilitole/hsfo-part1/part1-unicafe/src/App.js"],"names":["React","useState","Statistics","all","text","statsent","Statistic","good","gdclicks","bad","badclicks","neutral","neutclicks","allClicks","averageClick","positiveClick","App","setGood","gdpts","setNeutral","neutpts","setBad","badpts","Button","handleClick","handleGoodClick","handleBadClick","handleNeutClick","statistics"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACvB,MAAIC,GAAG,KAAK,CAAZ,EAAe;AACb,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AACD,sBACE;AAAA,2BACI;AAAA,8BACE;AAAA,kBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAhBD;;KAAMH,U;;AAkBN,MAAMI,SAAS,GAAG,CAAC;AAACF,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAD,KAAsB;AACtC,sBACA;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAG,MAAnB;AAA0B,MAAA,QAAQ,EAAIE,IAAI,CAACC;AAA3C;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAG,KAAnB;AAAyB,MAAA,QAAQ,EAAIC,GAAG,CAACC;AAAzC;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAG,SAAnB;AAA6B,MAAA,QAAQ,EAAIC,OAAO,CAACC;AAAjD;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAG,KAAnB;AAAyB,MAAA,QAAQ,EAAIC;AAArC;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAG,SAAnB;AAA6B,MAAA,QAAQ,EAAEC;AAAvC;AAAA;AAAA;AAAA;AAAA,YALF,eAME,QAAC,UAAD;AAAY,MAAA,IAAI,EAAG,UAAnB;AAA8B,MAAA,QAAQ,EAAEC;AAAxC;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAUD,CAXD;;MAAMT,S;;AAcN,MAAMU,GAAG,GAAG,MAAM;AAAA;;AAEhB,QAAM,CAACT,IAAD,EAAOU,OAAP,IAAkBhB,QAAQ,CAAC;AAACO,IAAAA,QAAQ,EAAE,CAAX;AAAcU,IAAAA,KAAK,EAAE;AAArB,GAAD,CAAhC;AACA,QAAM,CAACP,OAAD,EAAUQ,UAAV,IAAwBlB,QAAQ,CAAC;AAACW,IAAAA,UAAU,EAAE,CAAb;AAAgBQ,IAAAA,OAAO,EAAE;AAAzB,GAAD,CAAtC;AACA,QAAM,CAACX,GAAD,EAAMY,MAAN,IAAgBpB,QAAQ,CAAC;AAACS,IAAAA,SAAS,EAAE,CAAZ;AAAeY,IAAAA,MAAM,EAAE;AAAvB,GAAD,CAA9B;;AAEA,QAAMC,MAAM,GAAG,CAAC;AAACC,IAAAA,WAAD;AAAcpB,IAAAA;AAAd,GAAD,kBACb;AAAQ,IAAA,OAAO,EAAIoB,WAAnB;AAAA,cAAiCpB;AAAjC;AAAA;AAAA;AAAA;AAAA,UADF;;AAIA,QAAMqB,eAAe,GAAG,MAAMR,OAAO,CAAC;AAACT,IAAAA,QAAQ,EAAED,IAAI,CAACC,QAAL,GAAgB,CAA3B;AAA8BU,IAAAA,KAAK,EAAEX,IAAI,CAACW,KAAL,GAAa;AAAlD,GAAD,CAArC;;AACA,QAAMQ,cAAc,GAAG,MAAML,MAAM,CAAC;AAACX,IAAAA,SAAS,EAAED,GAAG,CAACC,SAAJ,GAAgB,CAA5B;AAA+BY,IAAAA,MAAM,EAAEb,GAAG,CAACa,MAAJ,GAAa;AAApD,GAAD,CAAnC;;AACA,QAAMK,eAAe,GAAG,MAAMR,UAAU,CAAC;AAACP,IAAAA,UAAU,EAAED,OAAO,CAACC,UAAR,GAAqB,CAAlC;AAAqCQ,IAAAA,OAAO,EAAET,OAAO,CAACS,OAAR,GAAkB;AAAhE,GAAD,CAAxC;;AACA,QAAMN,YAAY,GAAG,CAACP,IAAI,CAACW,KAAL,GAAWT,GAAG,CAACa,MAAf,GAAsBX,OAAO,CAACS,OAA/B,IAAwC,CAA7D;AACA,QAAML,aAAa,GAAGR,IAAI,CAACC,QAAL,GAAc,GAAd,IAAmBD,IAAI,CAACC,QAAL,GAAcC,GAAG,CAACC,SAAlB,GAA4BC,OAAO,CAACC,UAAvD,IAAqE,GAA3F;AACA,QAAMC,SAAS,GAAGN,IAAI,CAACC,QAAL,GAAcC,GAAG,CAACC,SAAlB,GAA4BC,OAAO,CAACC,UAAtD;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAEa,eAArB;AAAsC,MAAA,IAAI,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAEE,eAArB;AAAsC,MAAA,IAAI,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAED,cAArB;AAAqC,MAAA,IAAI,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eAOE,QAAC,UAAD;AAAY,MAAA,UAAU,EAAEE;AAAxB;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA/BD;;GAAMZ,G;;MAAAA,G;AAmCN,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst Statistics = () => {\n  if (all === 0) {\n    return (\n      <div>\n        No feedback available\n      </div>\n    )\n  }\n  return (\n    <div>\n        <tr>\n          <th>{text}</th>\n          <td>{statsent}</td>\n        </tr>\n    </div>\n  ) \n}\n\nconst Statistic = ({text, statsent}) => {\n  return (\n  <div>\n    <Statistics text = 'Good' statsent = {good.gdclicks} /> \n    <Statistics text = 'Bad' statsent = {bad.badclicks} /> \n    <Statistics text = 'Neutral' statsent = {neutral.neutclicks} />\n    <Statistics text = 'All' statsent = {allClicks} />\n    <Statistics text = 'Average' statsent={averageClick} />\n    <Statistics text = 'Positive' statsent={positiveClick}/>\n  </div>\n  )\n}\n\n\nconst App = () => {\n\n  const [good, setGood] = useState({gdclicks: 0, gdpts: 0})\n  const [neutral, setNeutral] = useState({neutclicks: 0, neutpts: 0})\n  const [bad, setBad] = useState({badclicks: 0, badpts: 0})\n\n  const Button = ({handleClick, text}) => (\n    <button onClick = {handleClick}>{text}</button>\n  )\n\n  const handleGoodClick = () => setGood({gdclicks: good.gdclicks + 1, gdpts: good.gdpts + 1})\n  const handleBadClick = () => setBad({badclicks: bad.badclicks + 1, badpts: bad.badpts - 1})\n  const handleNeutClick = () => setNeutral({neutclicks: neutral.neutclicks + 1, neutpts: neutral.neutpts - 0})\n  const averageClick = (good.gdpts+bad.badpts+neutral.neutpts)/3\n  const positiveClick = good.gdclicks*100/(good.gdclicks+bad.badclicks+neutral.neutclicks) + '%'\n  const allClicks = good.gdclicks+bad.badclicks+neutral.neutclicks\n  \n  return (\n    <div>\n      <h1>Give Feedback</h1>\n      <Button handleClick={handleGoodClick} text='Good' />        \n      <Button handleClick={handleNeutClick} text='Neutral' />        \n      <Button handleClick={handleBadClick} text='Bad' />        \n      <br />\n      <h1>Statistics</h1>\n      <Statistics statistics={statistics} />\n      <table>\n      \n      </table>\n    </div>\n)\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}