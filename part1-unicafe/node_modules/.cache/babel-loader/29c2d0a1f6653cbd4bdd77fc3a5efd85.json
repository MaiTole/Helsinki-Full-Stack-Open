{"ast":null,"code":"var _jsxFileName = \"/Users/maithilitole/hsfo-part1/part1-unicafe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Statistics = () => {\n  if (all === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No feedback available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: statsent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Statistics;\n\nconst Statistic = ({\n  text,\n  statsent\n}) => {\n  /*#__PURE__*/\n  _jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Statistics, {\n      all: allClicks,\n      text: \"Good\",\n      statsent: good.gdclicks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      all: allClicks,\n      text: \"Bad\",\n      statsent: bad.badclicks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      all: allClicks,\n      text: \"Neutral\",\n      statsent: neutral.neutclicks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      all: allClicks,\n      text: \"All\",\n      statsent: allClicks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      all: allClicks,\n      text: \"Average\",\n      statsent: averageClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      all: allClicks,\n      text: \"Positive\",\n      statsent: positiveClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 3\n  }, this);\n};\n\n_c2 = Statistic;\n\nconst App = () => {\n  _s();\n\n  const [good, setGood] = useState({\n    gdclicks: 0,\n    gdpts: 0\n  });\n  const [neutral, setNeutral] = useState({\n    neutclicks: 0,\n    neutpts: 0\n  });\n  const [bad, setBad] = useState({\n    badclicks: 0,\n    badpts: 0\n  });\n\n  const Button = ({\n    handleClick,\n    text\n  }) => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n\n  const stats = [[all = {\n    allClicks\n  }, text = 'Good', statsent = good.gdclicks], [all = {\n    allClicks\n  }, text = 'Neutral', statsent = neutral.neutclicks], [all = {\n    allClicks\n  }, text = 'Bad', statsent = bad.badclicks], [all = {\n    allClicks\n  }, text = 'All', statsent = allClicks], [all = {\n    allClicks\n  }, text = 'Average', statsent = averageClick], [all = {\n    allClicks\n  }, text = 'Positive', statsent = positiveClick]];\n\n  const handleGoodClick = () => setGood({\n    gdclicks: good.gdclicks + 1,\n    gdpts: good.gdpts + 1\n  });\n\n  const handleBadClick = () => setBad({\n    badclicks: bad.badclicks + 1,\n    badpts: bad.badpts - 1\n  });\n\n  const handleNeutClick = () => setNeutral({\n    neutclicks: neutral.neutclicks + 1,\n    neutpts: neutral.neutpts - 0\n  });\n\n  const averageClick = (good.gdpts + bad.badpts + neutral.neutpts) / 3;\n  const positiveClick = good.gdclicks * 100 / (good.gdclicks + bad.badclicks + neutral.neutclicks) + '%';\n  const allClicks = good.gdclicks + bad.badclicks + neutral.neutclicks;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Give Feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: handleGoodClick,\n      text: \"Good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: handleNeutClick,\n      text: \"Neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: handleBadClick,\n      text: \"Bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      statistics: statistics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"dwZEwBNmbZtZjkiPayJi3oSCWu4=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Statistics\");\n$RefreshReg$(_c2, \"Statistic\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/maithilitole/hsfo-part1/part1-unicafe/src/App.js"],"names":["React","useState","Statistics","all","text","statsent","Statistic","allClicks","good","gdclicks","bad","badclicks","neutral","neutclicks","averageClick","positiveClick","App","setGood","gdpts","setNeutral","neutpts","setBad","badpts","Button","handleClick","stats","handleGoodClick","handleBadClick","handleNeutClick","statistics"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nconst Statistics = () => {\n  if (all === 0) {\n    return (\n      <div>\n        No feedback available\n      </div>\n    )\n  }\n  return (\n    <div>\n        <tr>\n          <th>{text}</th>\n          <td>{statsent}</td>\n        </tr>\n    </div>\n  ) \n}\n\nconst Statistic = ({text, statsent}) => {\n  <div>\n  <Statistics all = {allClicks} text = 'Good' statsent = {good.gdclicks} /> \n  <Statistics all = {allClicks} text = 'Bad' statsent = {bad.badclicks} /> \n  <Statistics all = {allClicks} text = 'Neutral' statsent = {neutral.neutclicks} />\n  <Statistics all = {allClicks} text = 'All' statsent = {allClicks} />\n  <Statistics all = {allClicks} text = 'Average' statsent={averageClick} />\n  <Statistics all = {allClicks} text = 'Positive' statsent={positiveClick}/>\n  </div>\n}\n\nconst App = () => {\n\n  const [good, setGood] = useState({gdclicks: 0, gdpts: 0})\n  const [neutral, setNeutral] = useState({neutclicks: 0, neutpts: 0})\n  const [bad, setBad] = useState({badclicks: 0, badpts: 0})\n\n  const Button = ({handleClick, text}) => (\n    <button onClick = {handleClick}>{text}</button>\n  )\n\n  const stats = [\n    [all = {allClicks}, text = 'Good', statsent = good.gdclicks],\n    [all = {allClicks}, text = 'Neutral', statsent = neutral.neutclicks],\n    [all = {allClicks}, text='Bad', statsent = bad.badclicks],\n    [all = {allClicks}, text='All', statsent = allClicks],\n    [all = {allClicks}, text='Average', statsent = averageClick],\n    [all = {allClicks}, text='Positive', statsent = positiveClick]\n  ]\n\n  const handleGoodClick = () => setGood({gdclicks: good.gdclicks + 1, gdpts: good.gdpts + 1})\n  const handleBadClick = () => setBad({badclicks: bad.badclicks + 1, badpts: bad.badpts - 1})\n  const handleNeutClick = () => setNeutral({neutclicks: neutral.neutclicks + 1, neutpts: neutral.neutpts - 0})\n  const averageClick = (good.gdpts+bad.badpts+neutral.neutpts)/3\n  const positiveClick = good.gdclicks*100/(good.gdclicks+bad.badclicks+neutral.neutclicks) + '%'\n  const allClicks = good.gdclicks+bad.badclicks+neutral.neutclicks\n\n  return (\n    <div>\n      <h1>Give Feedback</h1>\n      <Button handleClick={handleGoodClick} text='Good' />        \n      <Button handleClick={handleNeutClick} text='Neutral' />        \n      <Button handleClick={handleBadClick} text='Bad' />        \n      <br />\n      <h1>Statistics</h1>\n      <Statistics statistics={statistics} />\n      <table>\n      \n      </table>\n    </div>\n)\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}